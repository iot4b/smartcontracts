pragma ever-solidity ^0.71.0;

pragma AbiHeader expire;

import {IUpgradable} from "./interfaces/IUpgradable.tsol";

contract Node is IUpgradable {
    uint32 contractVersion_ = 1;

    address public elector_;
    string public ipPort_; // ip:port
    string public contactInfo_; // owner contact info

    // Modifier that allows public function to accept all external calls.
    modifier alwaysAccept {
        tvm.accept();
        _;
    }

    // Modifier that allows public function to accept only Elector calls.
    modifier onlyElector {
        require(msg.sender == elector_, 102);
        tvm.accept();
        _;
    }

    constructor(
        address elector,
        string ipPort,
        string contactInfo
    ) {
        tvm.accept();

        elector_ = elector;
        ipPort_ = ipPort;
        contactInfo_ = contactInfo;
    }

    function get() public alwaysAccept view returns (
        address elector,
        string ipPort,
        string contactInfo
    )  {
        return (
            elector_,
            ipPort_,
            contactInfo_
        );
    }

    function getElector() public alwaysAccept view returns (address) {
        return elector_;
    }

    function getIpPort() public alwaysAccept view returns (string) {
        return ipPort_;
    }

    function getContactInfo() public alwaysAccept view returns (string) {
        return contactInfo_;
    }

    function setIpPort(string value) public alwaysAccept {
        ipPort_ = value;
    }

    function setContactInfo(string value) public alwaysAccept {
        contactInfo_ = value;
    }

    // Get current contract version
    function v() public alwaysAccept view returns (uint32 contractVersion) {
        return contractVersion_;
    }

    // Upgrade contract code
    function upgrade(TvmCell code) external override alwaysAccept {
        tvm.setcode(code);
        tvm.setCurrentCode(code);

        TvmCell data = abi.encode(
            elector_,
            ipPort_,
            contactInfo_);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell data) private {}
}
