pragma ever-solidity ^0.71.0;

pragma AbiHeader expire;

import {IUpgradable} from "./interfaces/IUpgradable.tsol";

contract Vendor is IUpgradable {
    string private contractVersion_ = "0.0.1";

    address public elector_;
    // название производителя
    string public vendorName_;
    // доля вендора и нод от прибыли. max 100, min 0 %, default 50
    uint public profitShare_;
    // контактные данные производителя
    string public contactInfo_;

    // Modifier that allows public function to accept all external calls.
    modifier alwaysAccept {
        tvm.accept();
        _;
    }

    /// @dev Contract constructor.
    constructor(
        address elector,
        string vendorName,
        uint profitShare,
        string contactInfo
    ) {
        // todo check pubkey
        // check that contract's public key is set
        //        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and message is signed with the owner's private key
        //        require(msg.pubkey() == tvm.pubkey(), 102);
        // check uint value
        //    require(profitShare >= 0, "profitShare must be in [0; 100]");
        //    require(profitShare <= 100, "profitShare must ben [0; 100]");
        require(profitShare >= 0, 102);
        require(profitShare <= 100, 102);
        tvm.accept();

        // set initial data
        elector_ = elector;
        vendorName_ = vendorName;
        profitShare_ = profitShare;
        contactInfo_ = contactInfo;
    }

    function get() public alwaysAccept view returns (
        address elector,
        string vendorName,
        uint profitShare,
        string contactInfo
    ) {
        return (
        elector_,
        vendorName_,
        profitShare_,
        contactInfo_
        );
    }

    function getElector() public view returns (address) {
        return elector_;
    }

    function getVendorName() public view returns (string) {
        return vendorName_;
    }

    function getProfitShare() public view returns (uint) {
        return profitShare_;
    }

    function getContactInfo() public view returns (string) {
        return contactInfo_;
    }

    function setVendorName(string value) public {
        vendorName_ = value;
    }

    function setProfitShare(uint value) public {
        require(value >= 0, 102);
        require(value <= 100, 102);
        tvm.accept();

        profitShare_ = value;
    }

    function setContactInfo(string value) public {
        contactInfo_ = value;
    }

    // todo возвращать версию текущего контракта
    function v() public alwaysAccept view returns (string contractVersion) {
        return contractVersion_;
    }

    // Upgrade contract code
    function upgrade(TvmCell code) public override {
        tvm.accept();
        tvm.commit();

        TvmBuilder builder;

        builder.store(contractVersion_);
        builder.store(elector_);
        builder.store(vendorName_);
        builder.store(profitShare_);
        builder.store(contactInfo_);

        tvm.setcode(code);
        tvm.setCurrentCode(code);

        onCodeUpgrade(builder.toCell());
    }

    function onCodeUpgrade(TvmCell data) private {
        tvm.resetStorage();

        TvmSlice s = data.toSlice();
        (contractVersion_,
        elector_,
        vendorName_,
        profitShare_,
        contactInfo_
        ) = s.decode(
            string,
            address,
            string,
            uint,
            string
        );
    }
}
