pragma ever-solidity ^0.70.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import {IUpgradable} from "./interfaces/IUpgradable.tsol";
import {Errors} from "./libraries/Errors.tsol";

contract DeviceAPI is IUpgradable {
    uint32 contractVersion_ = 0;

    address public elector_; // elector contract address
    address public vendor_; // vendor contract address
    string deviceType_; // device type
    string deviceModel_; // device model
    string deviceFW_; // firmware version
    string deviceAPI_; // device json config

    modifier onlyOwner() {
        require(msg.pubkey() == tvm.pubkey(), Errors.NOT_ALLOWED);
        tvm.accept();
        _;
    }

    /// @dev Contract constructor.
    constructor(
        address elector,
        address vendor,
        string deviceType,
        string deviceModel,
        string deviceFW,
        string deviceAPI

    ) {
        tvm.accept();

        // set initial data
        elector_ = elector;
        vendor_ = vendor;
        deviceType_ = deviceType;
        deviceModel_ = deviceModel;
        deviceFW_ = deviceFW;
        deviceAPI_ = deviceAPI;
    }

    function setDeviceType(string deviceType) public onlyOwner {
        deviceType_ = deviceType;
    }

    function setDeviceModel(string deviceModel) public onlyOwner {
        deviceModel_ = deviceModel;
    }

    function setDeviceFW(string deviceFW) public onlyOwner {
        deviceFW_ = deviceFW;
    }

    function setDeviceAPI(string deviceAPI) public onlyOwner {
        deviceAPI_ = deviceAPI;
    }

    function sendTransaction(address dest, uint128 value) public view onlyOwner {
        dest.transfer(value, true, 3);
    }

    // Upgrade contract code
    function upgrade(TvmCell code) external override onlyOwner {
        tvm.setcode(code);
        tvm.setCurrentCode(code);

        TvmCell data = abi.encode(
            elector_,
            vendor_,
            deviceType_,
            deviceModel_,
            deviceFW_,
            deviceAPI_);
        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell data) private {
//      tvm.resetStorage();

        (elector_,
        vendor_,
        deviceType_,
        deviceModel_,
        deviceFW_,
        deviceAPI_) = abi.decode(data,
            (address,
            address,
            string,
            string,
            string,
            string)
        );
        ++contractVersion_;
    }
}
