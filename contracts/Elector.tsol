pragma ever-solidity ^0.71.0;

pragma AbiHeader expire;

import {IUpgradable} from "./interfaces/IUpgradable.tsol";

contract Elector is IUpgradable {
    string private contractVersion_ = "v0.0.1";

    // список текущих нод на этом электоре
    address[] public nodesCurrent_; // List of current nodes
    address[] public nodesNext_; // List of next nodes
    address[] public nodesParticipants_; // List of all nodes that want to participate in the election
    address[] public nodesFault_; // list of nodes who was fault in current round


    // Modifier that allows public function to accept all external calls.
    modifier alwaysAccept {
        tvm.accept();
        _;
    }

    // Only contract owner
    modifier onlyAccountOwner {
//        msg.sender == address();
        tvm.accept();
        _;
    }

    // передаем ноды по умолчанию
    constructor(
        address[] defaultNodes
    ) {
        tvm.accept();
        nodesCurrent_ = defaultNodes;
    }

    // Устанавливаем список нод для текущего цикла
    function setNodes(address[] nodes) public onlyAccountOwner {
        nodesCurrent_ = nodes;
    }

    // You can read from a state variable without sending a transaction.
    function get() public alwaysAccept view returns (
        address[] nodes
    ) {
        return (
            nodesCurrent_
        );
    }

    // todo возвращать версию текущего контракта
    function v() public alwaysAccept view returns (string contractVersion) {
        return contractVersion_;
    }


    /*
    v1
    func CurrentList() // список текущих нод на этом раунде
    func TakeNextRound(node-address) //принять участие в следующем раунде 
    func Election() // провести выборы для следующего раунда
    func ReportFaultNode(node-address) // сообщить о некорректной работе ноды


    v2
    func NextList()  // список нод на следующем электоре
    func Participants() // список всех нод желающих участвовать в электоре

    v3
    func ProcessPaymentsNode(node-address) // обработать выплаты ноде
    func ProcessPaymentsVendor(vendor-address) // обработать выплаты вендору
    func Deposit() // пополнить депозит для девайса
    func WithdrawDeposit(device-address) // вывести депозит для девайса



    */

    // Upgrade contract code
    function upgrade(TvmCell code) public override {
        tvm.accept();
        tvm.commit();

        TvmBuilder builder;

        builder.store(contractVersion_);
        builder.store(nodesCurrent_);
        builder.store(nodesNext_);
        builder.store(nodesParticipants_);
        builder.store(nodesFault_);

        tvm.setcode(code);
        tvm.setCurrentCode(code);

        onCodeUpgrade(builder.toCell());
    }

    function onCodeUpgrade(TvmCell data) private {
        tvm.resetStorage();

        TvmSlice s = data.toSlice();
        (contractVersion_,
        nodesCurrent_,
        nodesNext_,
        nodesParticipants_,
        nodesFault_) = s.decode(
            string,
            address[],
            address[],
            address[],
            address[]
        );
    }
}
