pragma ever-solidity ^0.70.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import {IUpgradable} from "./interfaces/IUpgradable.tsol";
import {Errors} from "./libraries/Errors.tsol";

contract DeviceGroup is IUpgradable {
    mapping(uint256 => address) owners_; // device group owners: public_key => contract_address(if exists)
    mapping(address => uint256) devices_; // list of group devices: contract_address => public_key(optional)
    string name_; // group name
    address elector_; // elector contract address
    bool active_;

    uint32 static count_; // unique number: instance count for contracts with same public key - for different addresses

    // Custom event
    event GroupEvent(string name, string data);

    function groupEvent(string name, string data) public pure alwaysAccept {
        emit GroupEvent(name, data);
    }

    // Modifier that allows public function to accept all external calls.
    modifier alwaysAccept {
        tvm.accept();
        _;
    }

    modifier onlyOwner() {
        require(msg.pubkey() == tvm.pubkey() || owners_.exists(msg.pubkey()), Errors.NOT_ALLOWED);
        tvm.accept();
        _;
    }

    modifier onlyElectorContract() {
        require(msg.sender == elector_, Errors.NOT_ALLOWED);
        tvm.accept();
        _;
    }

    modifier onlyOwnerOrDevice() {
        require(msg.pubkey() == tvm.pubkey() || owners_.exists(msg.pubkey()) || devices_.exists(msg.sender), Errors.NOT_ALLOWED);
        tvm.accept();
        _;
    }

    constructor(
        string name,
        address elector,
        mapping(uint256 => address) owners,
        mapping(address => uint256) devices
    ) {
        tvm.accept();
        tvm.resetStorage();

        name_ = name;
        elector_ = elector;
        owners_ = owners;
        devices_ = devices;
    }

    // Transfer tokens to elector contract
    function transferToElector(uint128 value) public view onlyElectorContract {
        elector_.transfer(value);
    }

    // Transfer tokens to dest address, for owners
    function transfer(address dest, uint128 value) public view onlyOwnerOrDevice {
        dest.transfer(value);
    }

    // Set device group name
    function setName(string name) public onlyOwner {
        name_ = name;
    }

    // Set active / inactive
    function setActive(bool active) public onlyOwner {
        active_ = active;
    }

    // Add or update device in group, address and public key (if needed)
    function setDevice(address addr, uint256 pubKey) public onlyOwner {
        devices_[addr] = pubKey;
    }

    // Remove device from group by address
    function removeDevice(address addr) public onlyOwner {
        delete devices_[addr];
    }

    // Add owner public key and contract address if any
    function addOwner(uint256 pubKey, address addr) public onlyOwner {
        owners_[pubKey] = addr;
    }

    // Remove owner data by public key from owners list
    function removeOwner(uint256 pubKey) public onlyOwner {
        delete owners_[pubKey];
    }

    // Upgrade contract code
    function upgrade(TvmCell code) external override onlyOwner {
        tvm.setcode(code);
        tvm.setCurrentCode(code);

        TvmCell data = abi.encode(
            owners_,
            devices_,
            name_,
            elector_,
            active_);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell data) private {}
}
